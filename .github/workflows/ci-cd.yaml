name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-backend:
    runs-on: ubuntu-latest
    services:
      docker:
        image: docker:20.10.16
        options: --privileged
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        run: echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push userService Docker image
        run: |
          cd backend/userService
          mv DockerFile Dockerfile
          docker build -t ${{ secrets.DOCKER_USERNAME }}/user-service:${{ github.sha }} .
          docker push ${{ secrets.DOCKER_USERNAME }}/user-service:${{ github.sha }}

      - name: Build and push companyService Docker image
        run: |
          cd backend/companyService
          mv DockerFile Dockerfile
          docker build -t ${{ secrets.DOCKER_USERNAME }}/company-service:${{ github.sha }} .
          docker push ${{ secrets.DOCKER_USERNAME }}/company-service:${{ github.sha }}

      - name: Build and push bookingService Docker image
        run: |
          cd backend/bookingService
          docker build -t ${{ secrets.DOCKER_USERNAME }}/booking-service:${{ github.sha }} .
          docker push ${{ secrets.DOCKER_USERNAME }}/booking-service:${{ github.sha }}

      - name: Build and push chatService Docker image
        run: |
          cd backend/chatService
          docker build -t ${{ secrets.DOCKER_USERNAME }}/chat-service:${{ github.sha }} .
          docker push ${{ secrets.DOCKER_USERNAME }}/chat-service:${{ github.sha }}

  test-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies and run lint for userService
        run: |
          cd backend/userService
          npm install
          npm run lint

      - name: Install dependencies and run lint for companyService
        run: |
          cd backend/companyService
          npm install
          npm run lint

  deploy-backend:
    needs: [build-backend, test-backend]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3

      - name: Deploy to EKS
        run: |
          echo "${{ secrets.KUBECONFIG }}" | base64 --decode > kubeconfig
          export KUBECONFIG=./kubeconfig
          kubectl apply -f backend/kubernetes/

  deploy-frontend:
    needs: deploy-backend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: |
          cd frontend
          npm install

      - name: Deploy to Vercel
        run: |
          npm install -g vercel
          vercel --token ${{ secrets.VERCEL_TOKEN }} --prod --yes